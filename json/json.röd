post_load: {
	export(jsonToRödaObj)
	export(JSON_TYPE_FUNCTIONS)
	
	export(@jsonField)
	exportType("JsonField")
	export(mapToRecord)
}

function jsonToRödaObj(json_tree) {
	JSON_TYPE_FUNCTIONS[json_tree[0]] json_tree
}

{
	NULL := "null"
	
	JSON_TYPE_FUNCTIONS := new map
	JSON_TYPE_FUNCTIONS["LIST"] = { |json_tree|
		return [JSON_TYPE_FUNCTIONS[elem[0]](elem) for elem in json_tree[1]]
	}
	JSON_TYPE_FUNCTIONS["MAP"] = { |json_tree|
		objmap := new map
		for elem in json_tree[1] do
			objmap[elem[0]] = JSON_TYPE_FUNCTIONS[elem[1][0]](elem[1])
		done
		return objmap
	}
	JSON_TYPE_FUNCTIONS["STRING"] = { |json_tree|; return json_tree[1] }
	JSON_TYPE_FUNCTIONS["NUMBER"] = JSON_TYPE_FUNCTIONS["STRING"]
	JSON_TYPE_FUNCTIONS["BOOLEAN"] = { |json_tree|
		return TRUE if [ json_tree[1] = "true" ]
		return FALSE
	}
	JSON_TYPE_FUNCTIONS["NULL"] = { |json_tree|
		return NULL
	}
}

function @jsonField(name : string) {
	return new JsonField(name)
}

record JsonField(n) {
	name : string = n
}

function mapToRecord(m, c) {
	obj := c.newInstance()
	c.fields | for field do
		for a in field.annotations if [ a is JsonField ] do
			push(a.name) 
		done | if tryPull(n) do
			if [ m[n] is string and m[n] = "null" ] do
				try field.set(obj, 0)
				try field.set(obj, "")
			else
				field.set(obj, m[n])
			done
		done
		
	done
	return obj
}
